// Code generated by mockery v2.53.0. DO NOT EDIT.

package mnats

import (
	context "context"

	bnats "github.com/0LuigiCode0/hezzl/internal/infrastructure/broker/nats"

	dclickhouse "github.com/0LuigiCode0/hezzl/internal/domain/clickhouse"

	mock "github.com/stretchr/testify/mock"
)

// IStream is an autogenerated mock type for the IStream type
type IStream struct {
	mock.Mock
}

type IStream_Expecter struct {
	mock *mock.Mock
}

func (_m *IStream) EXPECT() *IStream_Expecter {
	return &IStream_Expecter{mock: &_m.Mock}
}

// PushGoodsLog provides a mock function with given fields: ctx, in
func (_m *IStream) PushGoodsLog(ctx context.Context, in *dclickhouse.LogEventGood) error {
	ret := _m.Called(ctx, in)

	if len(ret) == 0 {
		panic("no return value specified for PushGoodsLog")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *dclickhouse.LogEventGood) error); ok {
		r0 = rf(ctx, in)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IStream_PushGoodsLog_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PushGoodsLog'
type IStream_PushGoodsLog_Call struct {
	*mock.Call
}

// PushGoodsLog is a helper method to define mock.On call
//   - ctx context.Context
//   - in *dclickhouse.LogEventGood
func (_e *IStream_Expecter) PushGoodsLog(ctx interface{}, in interface{}) *IStream_PushGoodsLog_Call {
	return &IStream_PushGoodsLog_Call{Call: _e.mock.On("PushGoodsLog", ctx, in)}
}

func (_c *IStream_PushGoodsLog_Call) Run(run func(ctx context.Context, in *dclickhouse.LogEventGood)) *IStream_PushGoodsLog_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*dclickhouse.LogEventGood))
	})
	return _c
}

func (_c *IStream_PushGoodsLog_Call) Return(_a0 error) *IStream_PushGoodsLog_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IStream_PushGoodsLog_Call) RunAndReturn(run func(context.Context, *dclickhouse.LogEventGood) error) *IStream_PushGoodsLog_Call {
	_c.Call.Return(run)
	return _c
}

// Subscribe provides a mock function with given fields: ctx, subj, nameClient
func (_m *IStream) Subscribe(ctx context.Context, subj string, nameClient string) (bnats.IConsumer, error) {
	ret := _m.Called(ctx, subj, nameClient)

	if len(ret) == 0 {
		panic("no return value specified for Subscribe")
	}

	var r0 bnats.IConsumer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (bnats.IConsumer, error)); ok {
		return rf(ctx, subj, nameClient)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) bnats.IConsumer); ok {
		r0 = rf(ctx, subj, nameClient)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(bnats.IConsumer)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, subj, nameClient)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IStream_Subscribe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Subscribe'
type IStream_Subscribe_Call struct {
	*mock.Call
}

// Subscribe is a helper method to define mock.On call
//   - ctx context.Context
//   - subj string
//   - nameClient string
func (_e *IStream_Expecter) Subscribe(ctx interface{}, subj interface{}, nameClient interface{}) *IStream_Subscribe_Call {
	return &IStream_Subscribe_Call{Call: _e.mock.On("Subscribe", ctx, subj, nameClient)}
}

func (_c *IStream_Subscribe_Call) Run(run func(ctx context.Context, subj string, nameClient string)) *IStream_Subscribe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *IStream_Subscribe_Call) Return(_a0 bnats.IConsumer, _a1 error) *IStream_Subscribe_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IStream_Subscribe_Call) RunAndReturn(run func(context.Context, string, string) (bnats.IConsumer, error)) *IStream_Subscribe_Call {
	_c.Call.Return(run)
	return _c
}

// NewIStream creates a new instance of IStream. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIStream(t interface {
	mock.TestingT
	Cleanup(func())
}) *IStream {
	mock := &IStream{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
