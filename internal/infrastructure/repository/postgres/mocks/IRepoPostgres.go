// Code generated by mockery v2.53.0. DO NOT EDIT.

package mpostgres

import (
	context "context"

	dpostgres "github.com/0LuigiCode0/hezzl/internal/domain/postgres"
	mock "github.com/stretchr/testify/mock"

	rpostgres "github.com/0LuigiCode0/hezzl/internal/infrastructure/repository/postgres"
)

// IRepoPostgres is an autogenerated mock type for the IRepoPostgres type
type IRepoPostgres struct {
	mock.Mock
}

type IRepoPostgres_Expecter struct {
	mock *mock.Mock
}

func (_m *IRepoPostgres) EXPECT() *IRepoPostgres_Expecter {
	return &IRepoPostgres_Expecter{mock: &_m.Mock}
}

// Begin provides a mock function with given fields: ctx
func (_m *IRepoPostgres) Begin(ctx context.Context) (rpostgres.ITx, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Begin")
	}

	var r0 rpostgres.ITx
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (rpostgres.ITx, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) rpostgres.ITx); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(rpostgres.ITx)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IRepoPostgres_Begin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Begin'
type IRepoPostgres_Begin_Call struct {
	*mock.Call
}

// Begin is a helper method to define mock.On call
//   - ctx context.Context
func (_e *IRepoPostgres_Expecter) Begin(ctx interface{}) *IRepoPostgres_Begin_Call {
	return &IRepoPostgres_Begin_Call{Call: _e.mock.On("Begin", ctx)}
}

func (_c *IRepoPostgres_Begin_Call) Run(run func(ctx context.Context)) *IRepoPostgres_Begin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *IRepoPostgres_Begin_Call) Return(_a0 rpostgres.ITx, _a1 error) *IRepoPostgres_Begin_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IRepoPostgres_Begin_Call) RunAndReturn(run func(context.Context) (rpostgres.ITx, error)) *IRepoPostgres_Begin_Call {
	_c.Call.Return(run)
	return _c
}

// GetGoods provides a mock function with given fields: ctx, limit, offset
func (_m *IRepoPostgres) GetGoods(ctx context.Context, limit int, offset int) ([]*dpostgres.Good, error) {
	ret := _m.Called(ctx, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetGoods")
	}

	var r0 []*dpostgres.Good
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) ([]*dpostgres.Good, error)); ok {
		return rf(ctx, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int) []*dpostgres.Good); ok {
		r0 = rf(ctx, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*dpostgres.Good)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(ctx, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IRepoPostgres_GetGoods_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGoods'
type IRepoPostgres_GetGoods_Call struct {
	*mock.Call
}

// GetGoods is a helper method to define mock.On call
//   - ctx context.Context
//   - limit int
//   - offset int
func (_e *IRepoPostgres_Expecter) GetGoods(ctx interface{}, limit interface{}, offset interface{}) *IRepoPostgres_GetGoods_Call {
	return &IRepoPostgres_GetGoods_Call{Call: _e.mock.On("GetGoods", ctx, limit, offset)}
}

func (_c *IRepoPostgres_GetGoods_Call) Run(run func(ctx context.Context, limit int, offset int)) *IRepoPostgres_GetGoods_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(int))
	})
	return _c
}

func (_c *IRepoPostgres_GetGoods_Call) Return(_a0 []*dpostgres.Good, _a1 error) *IRepoPostgres_GetGoods_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IRepoPostgres_GetGoods_Call) RunAndReturn(run func(context.Context, int, int) ([]*dpostgres.Good, error)) *IRepoPostgres_GetGoods_Call {
	_c.Call.Return(run)
	return _c
}

// GetGoodsMeta provides a mock function with given fields: ctx
func (_m *IRepoPostgres) GetGoodsMeta(ctx context.Context) (*dpostgres.Meta, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetGoodsMeta")
	}

	var r0 *dpostgres.Meta
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*dpostgres.Meta, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *dpostgres.Meta); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dpostgres.Meta)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IRepoPostgres_GetGoodsMeta_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGoodsMeta'
type IRepoPostgres_GetGoodsMeta_Call struct {
	*mock.Call
}

// GetGoodsMeta is a helper method to define mock.On call
//   - ctx context.Context
func (_e *IRepoPostgres_Expecter) GetGoodsMeta(ctx interface{}) *IRepoPostgres_GetGoodsMeta_Call {
	return &IRepoPostgres_GetGoodsMeta_Call{Call: _e.mock.On("GetGoodsMeta", ctx)}
}

func (_c *IRepoPostgres_GetGoodsMeta_Call) Run(run func(ctx context.Context)) *IRepoPostgres_GetGoodsMeta_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *IRepoPostgres_GetGoodsMeta_Call) Return(_a0 *dpostgres.Meta, _a1 error) *IRepoPostgres_GetGoodsMeta_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IRepoPostgres_GetGoodsMeta_Call) RunAndReturn(run func(context.Context) (*dpostgres.Meta, error)) *IRepoPostgres_GetGoodsMeta_Call {
	_c.Call.Return(run)
	return _c
}

// InsertGood provides a mock function with given fields: ctx, in
func (_m *IRepoPostgres) InsertGood(ctx context.Context, in *dpostgres.InsertGood) (*dpostgres.Good, error) {
	ret := _m.Called(ctx, in)

	if len(ret) == 0 {
		panic("no return value specified for InsertGood")
	}

	var r0 *dpostgres.Good
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dpostgres.InsertGood) (*dpostgres.Good, error)); ok {
		return rf(ctx, in)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dpostgres.InsertGood) *dpostgres.Good); ok {
		r0 = rf(ctx, in)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dpostgres.Good)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dpostgres.InsertGood) error); ok {
		r1 = rf(ctx, in)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IRepoPostgres_InsertGood_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertGood'
type IRepoPostgres_InsertGood_Call struct {
	*mock.Call
}

// InsertGood is a helper method to define mock.On call
//   - ctx context.Context
//   - in *dpostgres.InsertGood
func (_e *IRepoPostgres_Expecter) InsertGood(ctx interface{}, in interface{}) *IRepoPostgres_InsertGood_Call {
	return &IRepoPostgres_InsertGood_Call{Call: _e.mock.On("InsertGood", ctx, in)}
}

func (_c *IRepoPostgres_InsertGood_Call) Run(run func(ctx context.Context, in *dpostgres.InsertGood)) *IRepoPostgres_InsertGood_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*dpostgres.InsertGood))
	})
	return _c
}

func (_c *IRepoPostgres_InsertGood_Call) Return(_a0 *dpostgres.Good, _a1 error) *IRepoPostgres_InsertGood_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IRepoPostgres_InsertGood_Call) RunAndReturn(run func(context.Context, *dpostgres.InsertGood) (*dpostgres.Good, error)) *IRepoPostgres_InsertGood_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveGood provides a mock function with given fields: ctx, id
func (_m *IRepoPostgres) RemoveGood(ctx context.Context, id int) (*dpostgres.Good, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for RemoveGood")
	}

	var r0 *dpostgres.Good
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (*dpostgres.Good, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) *dpostgres.Good); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dpostgres.Good)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IRepoPostgres_RemoveGood_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveGood'
type IRepoPostgres_RemoveGood_Call struct {
	*mock.Call
}

// RemoveGood is a helper method to define mock.On call
//   - ctx context.Context
//   - id int
func (_e *IRepoPostgres_Expecter) RemoveGood(ctx interface{}, id interface{}) *IRepoPostgres_RemoveGood_Call {
	return &IRepoPostgres_RemoveGood_Call{Call: _e.mock.On("RemoveGood", ctx, id)}
}

func (_c *IRepoPostgres_RemoveGood_Call) Run(run func(ctx context.Context, id int)) *IRepoPostgres_RemoveGood_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *IRepoPostgres_RemoveGood_Call) Return(_a0 *dpostgres.Good, _a1 error) *IRepoPostgres_RemoveGood_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IRepoPostgres_RemoveGood_Call) RunAndReturn(run func(context.Context, int) (*dpostgres.Good, error)) *IRepoPostgres_RemoveGood_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateGood provides a mock function with given fields: ctx, in
func (_m *IRepoPostgres) UpdateGood(ctx context.Context, in *dpostgres.UpdateGood) (*dpostgres.Good, error) {
	ret := _m.Called(ctx, in)

	if len(ret) == 0 {
		panic("no return value specified for UpdateGood")
	}

	var r0 *dpostgres.Good
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dpostgres.UpdateGood) (*dpostgres.Good, error)); ok {
		return rf(ctx, in)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dpostgres.UpdateGood) *dpostgres.Good); ok {
		r0 = rf(ctx, in)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dpostgres.Good)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dpostgres.UpdateGood) error); ok {
		r1 = rf(ctx, in)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IRepoPostgres_UpdateGood_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateGood'
type IRepoPostgres_UpdateGood_Call struct {
	*mock.Call
}

// UpdateGood is a helper method to define mock.On call
//   - ctx context.Context
//   - in *dpostgres.UpdateGood
func (_e *IRepoPostgres_Expecter) UpdateGood(ctx interface{}, in interface{}) *IRepoPostgres_UpdateGood_Call {
	return &IRepoPostgres_UpdateGood_Call{Call: _e.mock.On("UpdateGood", ctx, in)}
}

func (_c *IRepoPostgres_UpdateGood_Call) Run(run func(ctx context.Context, in *dpostgres.UpdateGood)) *IRepoPostgres_UpdateGood_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*dpostgres.UpdateGood))
	})
	return _c
}

func (_c *IRepoPostgres_UpdateGood_Call) Return(_a0 *dpostgres.Good, _a1 error) *IRepoPostgres_UpdateGood_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IRepoPostgres_UpdateGood_Call) RunAndReturn(run func(context.Context, *dpostgres.UpdateGood) (*dpostgres.Good, error)) *IRepoPostgres_UpdateGood_Call {
	_c.Call.Return(run)
	return _c
}

// NewIRepoPostgres creates a new instance of IRepoPostgres. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIRepoPostgres(t interface {
	mock.TestingT
	Cleanup(func())
}) *IRepoPostgres {
	mock := &IRepoPostgres{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
