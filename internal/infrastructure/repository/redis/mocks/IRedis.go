// Code generated by mockery v2.53.0. DO NOT EDIT.

package mredis

import (
	context "context"

	dpostgres "github.com/0LuigiCode0/hezzl/internal/domain/postgres"
	mock "github.com/stretchr/testify/mock"
)

// IRedis is an autogenerated mock type for the IRedis type
type IRedis struct {
	mock.Mock
}

type IRedis_Expecter struct {
	mock *mock.Mock
}

func (_m *IRedis) EXPECT() *IRedis_Expecter {
	return &IRedis_Expecter{mock: &_m.Mock}
}

// DeleteAllWithGood provides a mock function with given fields: ctx, id
func (_m *IRedis) DeleteAllWithGood(ctx context.Context, id int) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAllWithGood")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IRedis_DeleteAllWithGood_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAllWithGood'
type IRedis_DeleteAllWithGood_Call struct {
	*mock.Call
}

// DeleteAllWithGood is a helper method to define mock.On call
//   - ctx context.Context
//   - id int
func (_e *IRedis_Expecter) DeleteAllWithGood(ctx interface{}, id interface{}) *IRedis_DeleteAllWithGood_Call {
	return &IRedis_DeleteAllWithGood_Call{Call: _e.mock.On("DeleteAllWithGood", ctx, id)}
}

func (_c *IRedis_DeleteAllWithGood_Call) Run(run func(ctx context.Context, id int)) *IRedis_DeleteAllWithGood_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *IRedis_DeleteAllWithGood_Call) Return(_a0 error) *IRedis_DeleteAllWithGood_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IRedis_DeleteAllWithGood_Call) RunAndReturn(run func(context.Context, int) error) *IRedis_DeleteAllWithGood_Call {
	_c.Call.Return(run)
	return _c
}

// GetGoods provides a mock function with given fields: ctx, limit, offset
func (_m *IRedis) GetGoods(ctx context.Context, limit int, offset int) ([]*dpostgres.Good, error) {
	ret := _m.Called(ctx, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetGoods")
	}

	var r0 []*dpostgres.Good
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) ([]*dpostgres.Good, error)); ok {
		return rf(ctx, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int) []*dpostgres.Good); ok {
		r0 = rf(ctx, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*dpostgres.Good)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(ctx, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IRedis_GetGoods_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGoods'
type IRedis_GetGoods_Call struct {
	*mock.Call
}

// GetGoods is a helper method to define mock.On call
//   - ctx context.Context
//   - limit int
//   - offset int
func (_e *IRedis_Expecter) GetGoods(ctx interface{}, limit interface{}, offset interface{}) *IRedis_GetGoods_Call {
	return &IRedis_GetGoods_Call{Call: _e.mock.On("GetGoods", ctx, limit, offset)}
}

func (_c *IRedis_GetGoods_Call) Run(run func(ctx context.Context, limit int, offset int)) *IRedis_GetGoods_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(int))
	})
	return _c
}

func (_c *IRedis_GetGoods_Call) Return(_a0 []*dpostgres.Good, _a1 error) *IRedis_GetGoods_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IRedis_GetGoods_Call) RunAndReturn(run func(context.Context, int, int) ([]*dpostgres.Good, error)) *IRedis_GetGoods_Call {
	_c.Call.Return(run)
	return _c
}

// PushGoods provides a mock function with given fields: ctx, limit, offset, goods
func (_m *IRedis) PushGoods(ctx context.Context, limit int, offset int, goods []*dpostgres.Good) error {
	ret := _m.Called(ctx, limit, offset, goods)

	if len(ret) == 0 {
		panic("no return value specified for PushGoods")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int, []*dpostgres.Good) error); ok {
		r0 = rf(ctx, limit, offset, goods)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IRedis_PushGoods_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PushGoods'
type IRedis_PushGoods_Call struct {
	*mock.Call
}

// PushGoods is a helper method to define mock.On call
//   - ctx context.Context
//   - limit int
//   - offset int
//   - goods []*dpostgres.Good
func (_e *IRedis_Expecter) PushGoods(ctx interface{}, limit interface{}, offset interface{}, goods interface{}) *IRedis_PushGoods_Call {
	return &IRedis_PushGoods_Call{Call: _e.mock.On("PushGoods", ctx, limit, offset, goods)}
}

func (_c *IRedis_PushGoods_Call) Run(run func(ctx context.Context, limit int, offset int, goods []*dpostgres.Good)) *IRedis_PushGoods_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(int), args[3].([]*dpostgres.Good))
	})
	return _c
}

func (_c *IRedis_PushGoods_Call) Return(_a0 error) *IRedis_PushGoods_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IRedis_PushGoods_Call) RunAndReturn(run func(context.Context, int, int, []*dpostgres.Good) error) *IRedis_PushGoods_Call {
	_c.Call.Return(run)
	return _c
}

// NewIRedis creates a new instance of IRedis. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIRedis(t interface {
	mock.TestingT
	Cleanup(func())
}) *IRedis {
	mock := &IRedis{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
